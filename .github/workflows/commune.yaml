name: Commune MAS Build & Deploy

on:
  push:
    branches:
      - commune
    paths: 
      - "crates/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "templates/**"
      - "frontend/**"
      - ".github/workflows/commune.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  compute-version:
    name: Compute version using git describe
    if: github.event_name == 'push' || github.event.label.name == 'Z-Build-Workflow'
    runs-on: ubuntu-24.04

    permissions:
      contents: read

    outputs:
      describe: ${{ steps.git.outputs.describe }}
      timestamp: ${{ steps.git.outputs.timestamp }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4.2.2
        with:
          # Need a full clone so that `git describe` reports the right version
          fetch-depth: 0

      - name: Compute version and timestamp out of git history
        id: git
        run: |
          echo "describe=$(git describe --tags --match 'v*.*.*' --always)" >> $GITHUB_OUTPUT
          echo "timestamp=$(git log -1 --format=%ct)" >> $GITHUB_OUTPUT

  build-assets:
    name: Build assets
    if: github.event_name == 'push' || github.event.label.name == 'Z-Build-Workflow'
    runs-on: ubuntu-24.04

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4.2.2

      - uses: ./.github/actions/build-frontend
      - uses: ./.github/actions/build-policies

      - name: Prepare assets artifact
        run: |
          mkdir -p assets-dist/share
          cp policies/policy.wasm assets-dist/share/policy.wasm
          cp frontend/dist/manifest.json assets-dist/share/manifest.json
          cp -r frontend/dist/ assets-dist/share/assets
          cp -r templates/ assets-dist/share/templates
          cp -r translations/ assets-dist/share/translations
          chmod -R u=rwX,go=rX assets-dist/

      - name: Upload assets
        uses: actions/upload-artifact@v4.6.2
        with:
          name: assets
          path: assets-dist

  build-binaries:
    name: Build binaries
    if: github.event_name == 'push' || github.event.label.name == 'Z-Build-Workflow'
    runs-on: ubuntu-24.04

    needs:
      - compute-version

    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu

    env:
      VERGEN_GIT_DESCRIBE: ${{ needs.compute-version.outputs.describe }}
      SOURCE_DATE_EPOCH: ${{ needs.compute-version.outputs.timestamp }}

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            ${{ matrix.target }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.8

      - name: Install zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild

      - name: Build the binary
        run: |
          cargo zigbuild \
            --release \
            --target ${{ matrix.target }}.2.17 \
            --no-default-features \
            --features dist \
            -p mas-cli

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/mas-cli

  assemble-archives:
    name: Assemble release archives
    if: github.event_name == 'push' || github.event.label.name == 'Z-Build-Workflow'
    runs-on: ubuntu-24.04

    needs:
      - build-assets
      - build-binaries

    permissions:
      contents: read

    steps:
      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: assets-dist

      - name: Download binary aarch64
        uses: actions/download-artifact@v4
        with:
          name: binary-aarch64-unknown-linux-gnu
          path: binary-aarch64

      - name: Create final archives
        run: |
          for arch in aarch64; do
            mkdir -p dist/${arch}/share
            cp -r assets-dist/share/* dist/${arch}/share/
            cp binary-$arch/mas-cli dist/${arch}/mas-cli
            chmod -R u=rwX,go=rX dist/${arch}/
            chmod u=rwx,go=rx dist/${arch}/mas-cli
            tar -czvf mas-cli-${arch}-linux.tar.gz --owner=0 --group=0 -C dist/${arch}/ .
          done

      - name: Upload aarch64 archive
        uses: actions/upload-artifact@v4.6.2
        with:
          name: mas-cli-aarch64-linux
          path: mas-cli-aarch64-linux.tar.gz

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts
          ssh-keyscan -H "${{ secrets.VPS_HOST_DEV }}" >> ~/.ssh/known_hosts

      - name: Upload binary 
        run: |
          rsync -avz --progress mas-cli-aarch64-linux.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/mas/
          rsync -avz --progress mas-cli-aarch64-linux.tar.gz ${{ secrets.VPS_USER_DEV }}@${{ secrets.VPS_HOST_DEV }}:/home/${{ secrets.VPS_USER_DEV }}/mas/

